use std::{
    io::{self, Read as _, Write as _},
    path::{Path, PathBuf},
};

use anyhow::{bail, Context as _};
use clap::Parser;
use fsmentry_core::{FsmEntry, Mermaid};
use quote::ToTokens as _;
use syn::parse::{Parse as _, Parser as _};

/// Read a file in a DSL, and generate rust code for a state machine.
#[derive(Parser)]
struct Args {
    /// Input file to generate from.
    /// If `-` or not supplied, read from stdin.
    file: Option<PathBuf>,
}

fn main() -> anyhow::Result<()> {
    let Args { file } = Args::parse();
    let input = match file {
        Some(path) if path == Path::new("-") => get_stdin()?,
        Some(path) => std::fs::read_to_string(path).context("error reading file")?,
        None => get_stdin()?,
    };
    let parser = FsmEntry::parse;
    let generator = match parser.parse_str(&input) {
        Ok(generator) => generator.map_mermaid(|()| Mermaid::default()),
        Err(error) => {
            let s = syn_miette::Error::new(error, input).render();
            bail!("\n{}", s);
        }
    };

    let printme = prettyplease::unparse(
        &syn::parse2(generator.to_token_stream()).context("unexpected output from codegen")?,
    );
    writeln!(
        io::stdout(),
        "// generated by fsmentry {}\n{printme}",
        env!("CARGO_PKG_VERSION")
    )?;
    Ok(())
}

fn get_stdin() -> anyhow::Result<String> {
    let mut s = String::new();
    io::stdin()
        .read_to_string(&mut s)
        .context("error reading from stdin")?;
    Ok(s)
}
